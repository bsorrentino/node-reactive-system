{"mappings":"0EA+BaA,EAAAA,IA3Bb,MAEaC,KAAO,cAMhBC,aACIC,KAAKC,WAAaC,EAAIC,SAASC,WAAAA,GAAeJ,KAAKF,gBAGvDO,UACIL,KAAKM,cAAgBC,EAAS,KAEzBC,UAAWR,KAAKC,YAGzBQ,SACQT,KAAKM,gBACLN,KAAKM,cAAcI,cACnBV,KAAKM,mBAAgBK","sources":["./src/index.ts"],"sourcesContent":["import { MessageBus } from '@soulsoftware/bus-core'\nimport { Bus } from '@soulsoftware/rxbus'\nimport { interval, Subject, Subscription } from 'rxjs'\n\nclass TimerModule implements MessageBus.Module {\n\n    readonly name = \"TimerModule\"\n    \n    private _myChannel?:Subject<number>\n\n    private _subscription?:Subscription\n\n    onRegister() {\n        this._myChannel = Bus.channels.newChannel( `${this.name}/channel` )\n    }\n\n    onStart() {\n        this._subscription = interval(1000)\n            //.pipe( tap( tick => console.log( `${this.name} emit `, tick )) )\n            .subscribe( this._myChannel )\n    }\n\n    onStop() {\n        if( this._subscription ) {\n            this._subscription.unsubscribe()\n            this._subscription = undefined\n        }\n    }\n}\n\n\nexport const Module = new TimerModule()"],"names":["Module","name","onRegister","this","_myChannel","Bus","channels","newChannel","onStart","_subscription","interval","subscribe","onStop","unsubscribe","undefined"],"version":3,"file":"index.js.map"}