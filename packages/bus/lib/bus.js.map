{"mappings":"IAWgCA,kCAAAA,sBAClBA,EAAEC,YAAaD,EAAEE,cCRrBC,IAAAA,EAAAA","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/bus/src/bus.ts"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","import assert from \"assert\"\nimport { EventEmitter } from \"events\"\n\n\nnamespace event {\n\n    interface Subscription {\n        event:string | symbol\n        listener: (...args: any[]) => void\n    }\n\n    class ObservableChannel<T> {\n\n        _emitter = new EventEmitter()\n    \n        on( event: string | symbol, listener: (args:T) => void ):Subscription {\n            this._emitter.on( event, listener)\n            return { event:event, listener:listener }\n        }\n\n        onAsync( event: string | symbol, listener: (args:T) => void ):Subscription {\n            const asyncListener = (args:T) => setImmediate( () => listener(args) )\n            this._emitter.on( event, asyncListener)\n            return { event:event, listener:asyncListener }\n        }\n\n        off( subscription:Subscription ) {\n            this._emitter.off( subscription.event, subscription.listener)\n        }\n\n    }\n\n    class SubjectChannel<T> extends ObservableChannel<T> {\n        \n        emit( event: string | symbol, ...args: any[] ):boolean {\n            return this._emitter.emit( event, args )\n        }\n    }\n\n    class Bus {\n    \n        private _channels = new Map<string,SubjectChannel<any>>()\n        \n        newChannel<T>( name:string ):SubjectChannel<T> {\n            assert.ok( !this._channels.has( name ), `Channel ${name} already exists!` )\n\n            let result = new SubjectChannel<T>()\n            this._channels.set( name, result )\n            return result\n\n\n        }\n\n        channel<T>( name:string ):ObservableChannel<T> {\n            assert.ok( this._channels.has( name ), `Channel ${name} doesn't exists!` )\n            \n            return this._channels.get( name )!\n        }\n    }\n}\n"],"names":["a","__esModule","default","$00eacb0e31723c0f4175cf9b3389d620$var$event"],"version":3,"file":"bus.js.map"}