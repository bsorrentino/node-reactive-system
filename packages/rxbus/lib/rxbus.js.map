{"mappings":"IAWgCA,2BAAAA,sBAClBA,EAAEC,YAAaD,EAAEE,cCRrBC,IAAAA,EAAAA","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/rxbus/src/rxbus.ts"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","import assert from 'assert'\n\nimport { Observable, Subject } from 'rxjs'\n\nnamespace event {\n\n    class Bus {\n    \n        private _channels = new Map<string,Subject<any>>()\n\n        newChannel<T>( name:string ):Subject<T> {\n            assert.ok( !this._channels.has( name ), `Channel ${name} already exists!` )\n            let result = new Subject<T>()\n            this._channels.set( name, result )\n            return result\n        }\n\n        channel<T>( name:string ):Observable<T> {\n            assert.ok( this._channels.has( name ), `Channel ${name} doesn't exists!` )\n            \n            return this._channels.get( name )!.asObservable()\n        }\n    }\n}\n"],"names":["a","__esModule","default","$1c7634872c8eb74af7127b3e5f0c1cd9$var$event"],"version":3,"file":"rxbus.js.map"}