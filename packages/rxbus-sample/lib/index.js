var{firstValueFrom:e}=require("rxjs"),{Module:r}=require("@soulsoftware/rxbus-trace"),{Module:o,Subjects:s}=require("@soulsoftware/rxbus-timer"),{Module:t,Subjects:n}=require("@soulsoftware/rxbus-fastify"),{Bus:u}=require("@soulsoftware/rxbus"),{filter:l}=require("rxjs/operators"),{Worker:a}=require("worker_threads");!function(){console.log("start"),u.modules.register(r),u.modules.register(o),u.modules.register(t,{port:8888,requestTimeout:5e3});for(let e of u.modules.names)console.log(`"${e}"`,"registerd");!function(){const r="WS_MAIN",l=u.channel(o.name).observe(s.Tick),a=u.channel(r).subject(n.WSMessage),c=u.replyChannel(t.name).request({topic:n.WSAdd,data:r});e(c).then((()=>l.subscribe((e=>a.next(e))))).catch((e=>console.error(e)))}(),function(){try{const e=new a("./lib/worker.js",{});console.log("worker thread id",e.threadId);const r=u.workerChannel(e),t=u.channel(o.name).observe(s.Tick);r.observable.subscribe({next:e=>console.log("worker thread result ",e),error:e=>console.error("worker error",e)}),t.pipe(l((({data:e})=>e%10==0))).subscribe({next:({data:e})=>{console.log("send tick to worker",e),r.subject.next(e)},error:e=>console.error("worker error",e)})}catch(e){console.error("error creating worker thread",e)}}(),u.modules.start()}();