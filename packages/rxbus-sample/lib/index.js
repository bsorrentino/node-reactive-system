var{Module:e}=require("@soulsoftware/rxbus-trace"),{Module:r,Subjects:o}=require("@soulsoftware/rxbus-timer"),{Module:s,Subjects:t}=require("@soulsoftware/rxbus-fastify"),{Bus:n}=require("@soulsoftware/rxbus"),{filter:l}=require("rxjs/operators"),{Worker:u}=require("worker_threads");!function(){console.log("start"),n.modules.register(e),n.modules.register(r),n.modules.register(s,{port:8888,requestTimeout:5e3});for(let e of n.modules.names)console.log(`"${e}"`,"registerd");!function(){const e="WS_MAIN",l=n.channel(r.name).observe(o.Tick),u=n.channel(e).subject(t.WSMessage);n.replyChannel(s.name).request({topic:t.WSAdd,data:e}).subscribe({next:e=>console.log(`next: ${t.WSAdd}`),error:e=>console.error(`error: ${t.WSAdd}`,e),complete:()=>l.subscribe((e=>u.next(e)))})}(),function(){try{const e=new u("./lib/worker.js",{});console.log("worker thread id",e.threadId);const s=n.workerChannel(e),t=n.channel(r.name).observe(o.Tick);s.observable.subscribe({next:e=>console.log("worker thread result ",e),error:e=>console.error("worker error",e)}),t.pipe(l((({data:e})=>e%10==0))).subscribe({next:({data:e})=>{console.log("send tick to worker",e),s.subject.next(e)},error:e=>console.error("worker error",e)})}catch(e){console.error("error creating worker thread",e)}}(),n.modules.start()}();