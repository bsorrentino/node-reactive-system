var{Module:e}=require("@soulsoftware/rxbus-fastify"),{tap:s}=require("rxjs/operators"),{interval:n}=require("rxjs"),{Bus:t}=require("@soulsoftware/rxbus");function r(e,s,n){return s in e?Object.defineProperty(e,s,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[s]=n,e}class o{constructor(){r(this,"name","TraceModule"),r(this,"_subscriptions",[])}onStart(){for(let e of t.channels.channelNames){const s=s=>console.log(`trace: got message from  ${e}`,s);this._subscriptions.push(t.channels.channel(e).subscribe({next:s}))}}onStop(){for(let e of this._subscriptions)e.unsubscribe();this._subscriptions=[]}}class i{constructor(){r(this,"name","TimerModule")}get myChannel(){return this._myChannel}onRegister(){this._myChannel=t.channels.newChannel(`${this.name}/channel`)}onStart(){this._subscription=n(1e3).pipe(s((e=>console.log(`${this.name} emit `,e)))).subscribe(this._myChannel)}onStop(){this._subscription&&(this._subscription.unsubscribe(),this._subscription=void 0)}}!function(){console.log("start"),t.modules.registerModule(new o),t.modules.registerModule(new i),t.modules.registerModule(e);for(let e of t.channels.channelNames)console.log(e,"registerd");t.modules.start()}();
//# sourceMappingURL=rxsample.js.map
