var{tap:e}=require("rxjs/operators"),{interval:n}=require("rxjs"),{Bus:s}=require("@soulsoftware/rxbus");function t(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}class i{constructor(){t(this,"name","MyModule")}get myChannel(){return this._myChannel}onRegister(){this._myChannel=s.channels.newChannel(`${this.name}/channel`)}onStart(){this._subscription=s.channels.channel("TimerModule/channel").subscribe({next:e=>console.log(`${this.name} got time:`,e)})}onStop(){this._subscription&&(this._subscription.unsubscribe(),this._subscription=void 0)}}class r{constructor(){t(this,"name","TimerModule")}get myChannel(){return this._myChannel}onRegister(){this._myChannel=s.channels.newChannel(`${this.name}/channel`)}onStart(){this._subscription=n(1e3).pipe(e((e=>console.log(`${this.name} emit `,e)))).subscribe(this._myChannel)}onStop(){this._subscription&&(this._subscription.unsubscribe(),this._subscription=void 0)}}!function(){console.log("start"),s.modules.registerModule(new i),s.modules.registerModule(new r);for(let e of s.channels.channelNames)console.log(e,"registerd");s.modules.start()}();
//# sourceMappingURL=rxsample.js.map
